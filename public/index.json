[
{
	"uri": "//localhost:1313/",
	"title": "Building a Basic Real-time Chat Application on AWS with AppSync and Amplify",
	"tags": [],
	"description": "",
	"content": "Workshop: Building a Real-time Chat Application on AWS with AppSync and Amplify Overview In this hands-on lab, you will learn how to build a basic real-time chat application. You will explore how to integrate core AWS services such as AWS AppSync (for GraphQL and real-time capabilities), Amazon DynamoDB (database), Amazon Cognito (user management), and deploy a React frontend using AWS Amplify Hosting. The goal is to help you master the fundamental knowledge required for fullstack application development on the AWS Serverless platform.\nEstimated Cost Cost: Approximately 0 USD Reason: The usage of services in this lab is designed to fall within AWS\u0026rsquo;s Free Tier. Therefore, you will not incur any significant costs throughout the practice, provided you adhere to the Free Tier limits and remember to clean up resources afterward. Estimated Completion Time Time: Approximately 2 - 3 hours (Depends on familiarity with AWS Console, React, and Git. This time includes setup, practical exercises, and potential troubleshooting). Contents Introduction Preparation Steps Set up AWS Amplify Hosting Backend Setup with AWS AppSync and DynamoDB Add User Authentication and Connect Backend to Frontend Resource Cleanup "
},
{
	"uri": "//localhost:1313/5-authentication/5.1-cognitouserpool/",
	"title": "Create Amazon Cognito User Pool",
	"tags": [],
	"description": "",
	"content": "5.1. Create Amazon Cognito User Pool We will create a User Pool in Amazon Cognito to manage users (sign-up, sign-in) for our chat application.\nIn the AWS Console search bar, type \u0026ldquo;Cognito\u0026rdquo; and select the Amazon Cognito service. In the left navigation pane, select User pools. Click the Create user pool button. Step 5.1.1: Configure sign-in experience Define your application: Select Single-page application (SPA). Name your application: Enter a name for your application, e.g., RealTimeChat (or any preferred name). Cognito user pool sign-in options: Select Username. (This is the simplest method for this workshop). You can choose other options like Email, Phone number if desired. Required attributes for sign-up: Select Email (to require users to provide an email address upon sign-up). Add a return URL: Enter http://localhost:3000/ (This is the default URL for your React application when running locally). Note: If you have deployed the application to AWS Amplify Hosting, you also need to add the URL of your deployed application here, e.g., https://master.d285j22zzz8mbh.amplifyapp.com/. Scroll down to the bottom of the page and click the Create user directory button. Congratulations! You have successfully created your Amazon Cognito User Pool. This User Pool will be used to authenticate users for your application. "
},
{
	"uri": "//localhost:1313/4-backend/4.1-dynamodb/",
	"title": "Create DynamoDB Table",
	"tags": [],
	"description": "",
	"content": "4.1. Create DynamoDB Table We will use Amazon DynamoDB, a high-performance NoSQL database, to store chat messages in our application.\nIn the AWS Console search bar, type \u0026ldquo;DynamoDB\u0026rdquo; and select the DynamoDB service. In the left navigation pane, select Tables.\nClick the Create table button. Fill in the table information:\nTable name: Enter a name for your table, e.g., RealTimeChat (or any name you prefer). Partition key: Type id, select String type. This will be the unique primary key for each item (record) in your table. Leave other settings as default. Scroll down to the bottom of the page and click the Create table button. Wait for the table\u0026rsquo;s status to change to Active. Once the table is Active, it\u0026rsquo;s ready for use. Congratulations! You have successfully created the DynamoDB database for your chat application.\n"
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Workshop: Building a Real-time Chat Application on AWS 1. Introduction to Key Services To build powerful, scalable, and secure real-time web applications, we will leverage the capabilities of core services on the Amazon Web Services (AWS) cloud platform. The following are the key services we will use in this workshop:\n1.1. AWS AppSync It is a fully managed GraphQL service that allows you to build flexible APIs to query, mutate, and synchronize data. AppSync includes built-in real-time capabilities through GraphQL Subscriptions and WebSockets, as well as security and scalability management.\n1.2. Amazon DynamoDB It is a high-performance, serverless, and fully managed NoSQL database. DynamoDB offers virtually unlimited scalability, low latency, and high availability, making it ideal for high-performance applications.\n1.3. Amazon Cognito It is a powerful and scalable User Identity Management service. Cognito helps you easily integrate secure user registration, login, and account management features into your web and mobile applications without having to build your own authentication system.\n1.4. AWS Amplify Hosting It is a fully managed hosting and CI/CD (Continuous Integration/Continuous Delivery) service, specifically designed for static websites and Single-Page Applications (SPAs) like React. Amplify Hosting automates the build and deployment process and provides a global CDN.\n2. Workshop Overview: Real-time Chat Application In this lab, you will learn how to build a complete real-time chat application, illustrating the close coordination among the AWS services introduced above. The ultimate goal is to achieve a fully functional, scalable, and secure chat application.\nAWS AppSync will be the central API gateway for the chat application. All requests from the frontend (sending messages, fetching chat history, receiving new messages) will go through AppSync. It will handle GraphQL Queries, Mutations, and especially Subscriptions to push new messages in real-time to all members of the conversation. Amazon DynamoDB will be the storage location for all your chat data, including user information (User), conversations (Conversation), membership records (UserConversation), and specific messages (Message). Amazon Cognito will be used for user authentication in the chat application, managing user accounts and providing a secure registration/login process. AWS Amplify Hosting will be the deployment destination for your React frontend application, automatically building your code from GitHub and deploying it to a global content delivery network (CDN). 3. How to Conduct the Workshop This workshop is structured with a clear roadmap for you to easily follow and execute:\n2. Preparation Steps 3. Set up AWS Amplify Hosting 4. Backend Setup with AWS AppSync and DynamoDB 5. Add User Authentication and Connect Backend to Frontend 6. Resource Cleanup "
},
{
	"uri": "//localhost:1313/5-authentication/5.2-appsync_use_cognitouserpool/",
	"title": "Configure AWS AppSync API to Use Cognito User Pools",
	"tags": [],
	"description": "",
	"content": "5.2. Configure AWS AppSync API to Use Cognito User Pools Now, we will configure your AWS AppSync API to use the newly created Amazon Cognito User Pool as the primary authorization method.\nAccess the AWS AppSync service again:\nIn the AWS Console, find and select the AWS AppSync service. Select your API: RealtimeChatAppAPI_Final. Initiate changing the default authorization method:\nIn the left navigation pane, select Settings. In the Primary authorization mode section, click the Edit button. Configure the primary authorization method and Save:\nOn the edit interface that appears: In the Primary authorization mode field, select Amazon Cognito User Pools. AWS Region: Select your AWS region (e.g., US-EAST-1). User pool: Select the User Pool you created in the previous step (e.g., RealTimeChat). Click the Save button. Confirm authorization method change:\nAfter clicking Save in the step above, an \u0026ldquo;Edit primary authorization mode\u0026rdquo; confirmation dialog will appear. Check the box \u0026ldquo;Instead of deleting, make API key an additional authorization mode\u0026rdquo;. To confirm this change, type exactly confirm into the text field. Click the Confirm button. Congratulations! You have successfully configured your AWS AppSync API to use Amazon Cognito User Pools for user authentication. "
},
{
	"uri": "//localhost:1313/4-backend/4.2-api_aws_appsync/",
	"title": "Create AWS AppSync API",
	"tags": [],
	"description": "",
	"content": "4.2. Create AWS AppSync API Now, we will create the main GraphQL API service for your real-time chat application. This API will be the connection point between your frontend and backend.\nIn the AWS Console search bar, type \u0026ldquo;AppSync\u0026rdquo; and select the AWS AppSync service.\nClick the Create API button and choose GraphQL API. Step 4.2.1: Choose API type API type: Keep the default selection as GraphQL APIs. (This is the type of GraphQL API that manages a single schema, suitable for our needs). GraphQL API Data Source: Select the Design from scratch option. Scroll down to the bottom of the page and click the Next button. Step 4.2.2: Specify API details API name: Enter a name for your API, e.g., RealTimeChatAppAPI_Final. Private API configuration: Make sure NOT to select Use private API features. Click the Next button. Step 4.2.3: Specify GraphQL resources Create a GraphQL type backed by a DynamoDB table: Select Create GraphQL resources later. Click the Next button. Step 4.2.4: Review and create API Review your API configuration settings in the Review section. Click the Create API button. Congratulations! You have successfully created your AWS AppSync API. "
},
{
	"uri": "//localhost:1313/2-prerequiste/",
	"title": "Prepare the source code",
	"tags": [],
	"description": "",
	"content": "\rYou need to have an AWS account and a GitHub account (or other Git providers) ready to perform this lab.\nPrepare Frontend Code You will download the sample frontend source code from GitHub and prepare it for deployment.\nStep 1: Download Sample Source Code (Clone from GitHub) Open a Command Prompt (CMD) window in the folder where you want to save the source code. Run the following command: git clone [https://github.com/ThanhHung1104/realtime-chat-frontend.git](https://github.com/ThanhHung1104/realtime-chat-frontend.git) This command will download the entire source code of the sample chat project to your computer, into a folder named realtime-chat-frontend. Navigate into the project directory: cd realtime-chat-frontend Step 2: Push Source Code to Your GitHub After downloading the sample source code, you need to create a repository on your personal GitHub account and push the downloaded source code there. AWS Amplify Hosting will connect to this repository.\nCreate a New Project on GitHub: Access and log in to your GitHub account. On the GitHub homepage, click the New button (or the + icon in the top right corner) to create a new repository. In the Repository name field, enter a name for your repository: realtime-chat-app-frontend (or a similar name, e.g., my-chat-app). Leave other default options as they are (choose Public or Private as desired, but make sure NOT to check \u0026ldquo;Initialize this repository with a README\u0026rdquo;, \u0026ldquo;Add .gitignore\u0026rdquo;, \u0026ldquo;Choose a license\u0026rdquo;). Click the Create repository button. Push Source Code to Git: Ensure you are in the root directory of your project (realtime-chat-app-frontend) in CMD. Run the following commands in order: git add . git commit -m \u0026#34;Initial commit: Set up real-time chat frontend\u0026#34; # IMPORTANT NOTE: Replace \u0026#39;YOUR_GITHUB_USERNAME\u0026#39; and \u0026#39;YOUR_REPO_NAME\u0026#39; with your information git remote set-url origin [https://github.com/YOUR_GITHUB_USERNAME/YOUR_REPO_NAME.git](https://github.com/YOUR_GITHUB_USERNAME/YOUR_REPO_NAME.git) git push -u origin main # Or git push -u origin master (depending on your main branch name) Note: You need to replace https://github.com/YOUR_GITHUB_USERNAME/YOUR_REPO_NAME.git in the git remote set-url origin command with YOUR OWN new GitHub repository URL that you created in Step 2.1. Example: git remote set-url origin [https://github.com/ThanhHung1104/realtime-chat-app-frontend.git](https://github.com/ThanhHung1104/realtime-chat-app-frontend.git) Check on GitHub: You are now ready to start your journey of building a real-time chat application on AWS!\n"
},
{
	"uri": "//localhost:1313/4-backend/4.3-graphql_schema/",
	"title": "Define GraphQL Schema",
	"tags": [],
	"description": "",
	"content": "4.3. Define GraphQL Schema The GraphQL Schema is the heart of your AppSync API; it defines the data structure and the operations (Query, Mutation, Subscription) that clients can perform. After creating the API, the next step is to define the schema for our complex chat application.\nAfter creating the API, you will be directed to the AppSync API overview page. In the left navigation pane, select Schema. In the Schema editor window, delete any default content (if present) and paste the entire complex schema below:\ntype Message { id: ID! sender: String! content: String! timestamp: AWSDateTime! } type Mutation { # Tạo một tin nhắn mới createMessage(sender: String!, content: String!): Message } type Query { # Lấy danh sách tất cả tin nhắn listMessages: [Message] } type Subscription { # Kích hoạt khi có một tin nhắn mới được tạo bởi mutation \u0026#39;createMessage\u0026#39; onCreateMessage: Message @aws_subscribe(mutations: [\u0026#34;createMessage\u0026#34;]) } schema { query: Query mutation: Mutation subscription: Subscription } Click the Save Schema button. Congratulations! You have successfully defined and saved the complex GraphQL Schema for your chat application. "
},
{
	"uri": "//localhost:1313/5-authentication/5.3-frontend/",
	"title": "Modify Frontend Code and Push Code to GitHub",
	"tags": [],
	"description": "",
	"content": "5.3. Modify Frontend Code and Push Code to GitHub We need to update and push the frontend source code to correctly connect the backend and the configured authentication method.\nStep 5.3.1: Update src/aws-exports.js file Open the src/aws-exports.js file in your source code directory. Replace the values with actual information from your AWS Console:\naws_appsync_region: This is your AWS Region where you are performing the lab (e.g., us-east-1).\naws_appsync_graphqlEndpoint:\nAccess AWS AppSync Console. Select APIs. Select your API (e.g., RealtimeChatAppAPI). In the left control panel, select Overview. Find and copy the API URL (which is the GraphQL endpoint). aws_user_pools_id:\nGo to AWS AppSync Console -\u0026gt; Select APIs. Select your API (e.g., RealtimeChatAppAPI). In the left control panel, select Settings. Scroll down to the Amazon Cognito User Pool section to find your User Pool ID. aws_user_pools_web_client_id:\nGo to Amazon Cognito Console. Select User pools and choose your created User Pool (e.g., RealTimeChat). In the left menu, select App integration. Scroll down to the App clients section. Select your created App client (e.g., RealTimeChat). Here, you can find the Client ID. oauth.domain:\nGo to Amazon Cognito Console. Select User pools and choose your created User Pool (e.g., RealTimeChat). In the left menu, select App integration. Scroll down to the Hosted UI section. Find your Domain (e.g., yourchatdomain-dev.auth.us-east-1.amazoncognito.com). After replacing the above information, save the src/aws-exports.js file. Step 5.3.2: Push the Modified Code to GitHub Open a Command Prompt (CMD) window in the root directory of your source code project. Run the following commands in order: git add . git commit -m \u0026#34;Update Amplify configuration for authentication\u0026#34; git push origin main # Or git push origin master (depending on your main branch name) Note: After you push your code to GitHub, AWS Amplify Hosting will automatically detect the changes and trigger a new build and deployment process for your frontend application.\n"
},
{
	"uri": "//localhost:1313/3-amplifyhosting/",
	"title": "Set up AWS Amplify Hosting",
	"tags": [],
	"description": "",
	"content": "Set up AWS Amplify Hosting You have prepared the frontend source code on GitHub. Now, we will connect it to AWS Amplify Hosting to deploy the application.\n1. Access AWS Amplify and connect Repository Log in to the AWS Management Console. Find and select the AWS Amplify service. On the main Amplify Console page, click the \u0026ldquo;Deploy an app\u0026rdquo; button. Step 1: Choose Source code provider and branch In the Connect repository section, select your source code provider (e.g., GitHub). Click the Next button. Note: Amplify will request access to your GitHub account. Please grant access and authorize according to GitHub\u0026rsquo;s instructions. Step 2: Choose Repository and Branch After granting access, you will see a list of your repositories. Select your repository (e.g., ThanhHung1104/realtime-chat-frontend). In the Branch section, select the branch you want to deploy (e.g., main or master). Click the Next button. Step 3: Configure App settings In the App name section, the application name will be automatically filled (e.g., realtime-chat-app-frontend). You can change it if you wish. Build settings will be automatically detected by Amplify (e.g., Frontend build command: npm run build, Build output directory: build). Please verify them to ensure accuracy. Click the Next button. Step 4: Review and Deploy Review all your configured settings in the Review section. Click the Save and deploy button. 2. Successful Deployment and Accessing the Application After clicking Save and deploy, you will be redirected to the application\u0026rsquo;s deployment status page.\nThe system will start the Provisioning, Building, and Deploying processes. Please wait until all stages change to \u0026ldquo;Deployed\u0026rdquo; status (green). This process may take a few minutes.\nOnce the deployment is complete, you will receive an automatically assigned URL Domain from AWS Amplify. Access the assigned Domain: https://master.d285j22zzz8mbh.amplifyapp.com/ Conclusion:\nYou have successfully deployed the frontend of your real-time chat application and are running it using AWS Amplify Hosting. From now on, you can update your code on your GitHub repository, and AWS Amplify Hosting will automatically trigger a new build and deployment process, keeping your application always up-to-date.\n"
},
{
	"uri": "//localhost:1313/4-backend/",
	"title": "Backend Setup with AWS AppSync and DynamoDB",
	"tags": [],
	"description": "",
	"content": "Contents: Create DynamoDB Table Create AWS AppSync API Define GraphQL Schema Define GraphQL Schema Create Resolvers Test API with Query Editor (Important) "
},
{
	"uri": "//localhost:1313/4-backend/4.4-data_source/",
	"title": "Configure Data Sources",
	"tags": [],
	"description": "",
	"content": "4.4. Configure Data Sources We will connect the GraphQL API to the created DynamoDB table by configuring a Data Source in AppSync.\nIn the left navigation pane of AppSync Console, select Data Sources. Then, click the Create data source button. Fill in the data source information:\nData source name: Enter a name for your data source, e.g., RealTimeChatDataSource (or any name you prefer). Data source type: Select Amazon DynamoDB table. Region: Select the corresponding AWS region (must be the same as where you created the DynamoDB table), which is us-east-1 here. Table name: Select the ChatMessages table that you created earlier. Create or use an existing role: Select New role. Click the Create button. Congratulations! You have successfully created the data source for your AppSync API. "
},
{
	"uri": "//localhost:1313/5-authentication/5.4-test/",
	"title": "Test Run",
	"tags": [],
	"description": "",
	"content": "5.4. Test Run After completing the steps above, we will check if the web chat application is working correctly.\nStep 5.4.1: Access the Application Access the URL Domain you received from the \u0026ldquo;3. Set up AWS Amplify Hosting\u0026rdquo; section.\nExample: https://master.d285j22zzz8mbh.amplifyapp.com/ You will see the application\u0026rsquo;s login/signup interface. Step 5.4.2: Create Account and Log in Click the \u0026ldquo;Create Account\u0026rdquo; tab.\nFill in the required information such as email, username, password, and click the Create Account button. After clicking Create Account, you will be redirected to the account verification page. Go to your email inbox to receive the verification code from Amazon Cognito. Enter the received verification code into the field and click the Confirm button. After successful verification, you will be directed to the main chat page of the application. Step 5.4.3: Test Real-time Chat Functionality Try sending any message. To test the real-time feature, open the application in another browser (or incognito tab) and create an additional account to log in. From the new account, send a message.\nObserve the browser tab of the original account. You will see the message from the new account appear immediately. This confirms that the real-time chat feature is working. "
},
{
	"uri": "//localhost:1313/5-authentication/",
	"title": "Add User Authentication and Connect Backend to Frontend",
	"tags": [],
	"description": "",
	"content": "Contents: Create Amazon Cognito User Pool Configure AWS AppSync API to use Cognito User Pools Modify Frontend Code and Push Code to GitHub Test Run "
},
{
	"uri": "//localhost:1313/4-backend/4.5-resolvers/",
	"title": "Create Resolvers",
	"tags": [],
	"description": "",
	"content": "4.5. Create Resolvers Resolvers are source code functions (in this case, JavaScript) that map GraphQL operations (Query, Mutation, Subscription) to operations on backend data sources (like DynamoDB). They allow your AppSync API to know how to perform operations on your data.\nIn the left navigation pane of AppSync Console, select Schema. Scroll down to the Resolvers section. You will see a list of Query, Mutation, and Subscription operations automatically generated from your Schema.\nStep 4.5.1: Create Resolver for Query.listMessages This resolver will allow you to retrieve a list of all messages from the DynamoDB table.\nFind the line listMessages under the Query section. Click the Attach button next to it. Configure Resolver: Data source name: Select RealTimeChatDataSource. Resolver runtime: Make sure AppSync JavaScript (APPSYNC_JS) is selected. Scroll down to the bottom of the page and click the Create button. You will be redirected to the Resolver code editor page. Paste the following JavaScript code into the Resolver code editor, replacing the existing content: /** * Sends a request to the attached data source * @param {import(\u0026#39;@aws-appsync/utils\u0026#39;).Context} ctx the context * @returns {*} the request */ export function request(ctx) { return { operation: \u0026#39;Scan\u0026#39; // Operation to scan the entire DynamoDB table }; } /** * Returns the resolver result * @param {import(\u0026#39;@aws-appsync/utils\u0026#39;).Context} ctx the context * @returns {*} the result */ export function response(ctx) { if (ctx.error) { util.error(ctx.error.message, ctx.error.type); } return ctx.result.items; // Returns the list of items from the Scan result } Click the Save button in the top right corner to save the Resolver. Step 4.5.2: Create Resolver for Mutation.createMessage This resolver will allow you to create a new message and save it to the DynamoDB table.\nFind the line createMessage under the Mutation section. Click the Attach button next to it. Configure Resolver: Data source name: Select RealTimeChatDataSource. Resolver runtime: Make sure AppSync JavaScript (APPSYNC_JS) is selected. Click the Create button. You will be redirected to the Resolver code editor page. Paste the following JavaScript code into the Resolver code editor, replacing the existing content: /** * Sends a request to the attached data source * @param {import(\u0026#39;@aws-appsync/utils\u0026#39;).Context} ctx the context * @returns {*} the request */ export function request(ctx) { const { sender, content } = ctx.args.input; // Get arguments from the mutation (corrected to ctx.args.input) return { operation: \u0026#39;PutItem\u0026#39;, // Operation to add an item to the DynamoDB table key: util.dynamodb.toMapValues({ id: util.autoId() }), // Auto-generate a unique ID attributeValues: util.dynamodb.toMapValues({ sender, content, timestamp: util.time.nowISO8601() }) // Save attributes }; } /** * Returns the resolver result * @param {import(\u0026#39;@aws-appsync/utils\u0026#39;).Context} ctx the context * @returns {*} the result */ export function response(ctx) { if (ctx.error) { util.error(ctx.error.message, ctx.error.type); } return ctx.result; // Return the result of the PutItem operation } Click the Save button in the top right corner to save the Resolver. Step 4.5.3: Configure Subscription onCreateMessage Find the line onCreateMessage under the Subscription section. You do not need to create a Resolver for this Subscription. AppSync automatically handles the WebSocket logic when you use the @aws_subscribe directive in your schema and it is linked to a Mutation (in this case, createMessage). You have successfully created and configured the basic Resolvers for your chat application.\n"
},
{
	"uri": "//localhost:1313/4-backend/4.6-query_editor/",
	"title": "Test API with Query Editor (Important)",
	"tags": [],
	"description": "",
	"content": "4.6. Test API with Query Editor (Important) This is a crucial step to confirm that your chat application\u0026rsquo;s backend is working correctly before proceeding with the frontend. You will use the built-in Query Editor in the AppSync Console to test your GraphQL operations.\nIn the left navigation pane of AppSync Console, select Queries. You will see an integrated GraphQL editor. This is where you will input and run your Queries, Mutations, and Subscriptions.\nStep 4.6.1: Test Mutation (createMessage) You will send a new message to test the data writing functionality.\nDelete any existing content in the editor.\nPaste the following Mutation code into the editor and click the \u0026ldquo;Run\u0026rdquo; button (Play icon) to execute it:\nmutation CreateNewMessage { createMessage(sender: \u0026#34;Alice\u0026#34;, content: \u0026#34;Hello from AppSync!\u0026#34;) { id sender content timestamp } } You will see the result returned in the right window, including the message id, sender name, content, and timestamp. This confirms the Mutation was successful. Step 4.6.2: Test Subscription (onCreateMessage) You will subscribe to listen for new messages in real-time.\nOpen a new browser tab and revisit your AppSync Console (or keep the current tab and open another). Navigate to the Queries section for your API.\nIn this new tab, paste the following Subscription code into the editor and click the \u0026ldquo;Run\u0026rdquo; button:\nsubscription OnNewMessage { onCreateMessage { id sender content timestamp } } When you run this Subscription, it will display \u0026ldquo;Listening\u0026hellip;\u0026rdquo; indicating that it is waiting for new messages. Go back to the original browser tab (or open a third tab).\nRun the createMessage Mutation again with different content (e.g., content: \u0026quot;This is a real-time message!\u0026quot;). Observe the tab with the Subscription. You will see the new message appear instantly without needing to refresh the page! This confirms that the WebSocket connection and real-time functionality are working. Step 4.6.3: Test Query (listMessages) You will retrieve all sent messages.\nIn another tab (or after completing the steps above), paste the following Query code into the editor and click the \u0026ldquo;Run\u0026rdquo; button:\nquery GetAllMessages { listMessages { id sender content timestamp } } You will see a list of all messages you have created in the result window. Congratulations! Your chat application\u0026rsquo;s backend is working as expected. You are now ready to proceed to the Frontend section.\n"
},
{
	"uri": "//localhost:1313/6-cleanup/",
	"title": "Resource Cleanup",
	"tags": [],
	"description": "",
	"content": "6. Resource Cleanup To avoid incurring unwanted costs after completing this lab, we will proceed with deleting all AWS resources that were created. Please follow the steps in the recommended order to ensure dependencies are handled correctly.\n6.1. Delete AWS Amplify Hosting Application Resources deleted: Your deployed frontend application, its builds, and associated resources like the CloudFront distribution or S3 bucket created by Amplify. Log in to the AWS Management Console. Find and select the Amplify service. Select your application (e.g., realtime-chat-app-frontend). In the left menu, click App settings. Click General settings. Click the Delete app button. Type Delete and click Delete App. 6.2. Delete AWS AppSync API Resources deleted: Your GraphQL API, its resolvers, the Data Sources that AppSync automatically created for DynamoDB tables, and potentially some related logs in CloudWatch. In the AWS Management Console, find and select the AWS AppSync service. In the left navigation pane, select APIs. Check your API (e.g., RealtimeChatAppAPI). In the top right corner, click the Delete button. Type the exact API name (RealtimeChatAppAPI) into the confirmation field, then click Delete again. 6.3. Delete Amazon DynamoDB Tables Resources deleted: All DynamoDB tables containing your chat data. In the AWS Management Console, find and select the DynamoDB service. In the left navigation pane, select Tables. Find and select your table(s) created by AppSync (e.g., RealTimeChat). For each table, click the Delete button. Confirm table deletion (usually by typing confirm into the confirmation field or checking a box if available), then click Delete. 6.4. Delete Amazon Cognito User Pool Resources deleted: All registered user accounts (username, password, email, etc.) and the App Clients you created in that User Pool. In the AWS Management Console, find and select the Cognito service. In the left navigation pane, select User Pools. Select your User Pool (the name you gave it, e.g., RealTimeChat or ChatAppUsersPool). In the top right corner, click the Delete button. Confirm and click Delete. 6.5. Delete Unused IAM Roles Resources deleted: IAM Roles that AppSync or Cognito used to interact with other services (e.g., Role for AppSync to access DynamoDB, Role for AppSync logging). Sometimes they are automatically deleted when you delete the main services, but sometimes they are not. In the AWS Management Console, find and select the IAM (Identity and Access Management) service. In the left navigation pane, select Roles. In the search bar, look for Roles with names related to your API or the services used. For example: Role for AppSync Service Access: Starts with AppSyncServiceRole- or contains your API name (e.g., RealtimeChatAppAPI_Final-service-role-... or AppSyncFullDynamoDBAccessRole if you created it manually). Role for AppSync Logging: Starts with AppSyncLoggingRole- or contains your API ID. Select the Role(s) that are no longer needed. Click the Delete button. Confirm and click Delete. After completing all the steps above, you will have cleanly deleted all AWS resources created in this lab and will not incur any further costs.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]