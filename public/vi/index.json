[{"uri":"https://ThanhHung1104.github.io/LTH_Workshop_01/vi/1-introduce/","title":"Giới thiệu","tags":[],"description":"","content":"Workshop: Xây Dựng Ứng Dụng Chat Thời Gian Thực trên AWS 1. Giới thiệu các dịch vụ chính Để xây dựng các ứng dụng web thời gian thực mạnh mẽ, có khả năng mở rộng và bảo mật, chúng ta sẽ tận dụng sức mạnh của các dịch vụ cốt lõi trên nền tảng điện toán đám mây của Amazon Web Services (AWS). Sau đây là các dịch vụ chính mà chúng ta sẽ sử dụng trong workshop này:\n1.1. AWS AppSync Là một dịch vụ GraphQL được quản lý hoàn toàn (fully managed), cho phép bạn xây dựng các API linh hoạt để truy vấn, thay đổi và đồng bộ hóa dữ liệu. AppSync tích hợp sẵn khả năng thời gian thực (real-time) thông qua GraphQL Subscriptions và WebSockets, cũng như quản lý bảo mật và mở rộng.\n1.2. Amazon DynamoDB Là một cơ sở dữ liệu NoSQL hiệu suất cao, phi máy chủ (serverless) và được quản lý hoàn toàn. DynamoDB cung cấp khả năng mở rộng gần như không giới hạn, độ trễ thấp và tính sẵn sàng cao, lý tưởng cho các ứng dụng yêu cầu hiệu suất cao.\n1.3. Amazon Cognito Là một dịch vụ quản lý danh tính người dùng (User Identity Management) mạnh mẽ và có khả năng mở rộng. Cognito giúp bạn dễ dàng tích hợp các tính năng đăng ký, đăng nhập và quản lý tài khoản người dùng một cách bảo mật vào ứng dụng web và di động mà không cần tự xây dựng hệ thống xác thực.\n1.4. AWS Amplify Hosting Là một dịch vụ hosting và CI/CD (Continuous Integration/Continuous Delivery) được quản lý hoàn toàn, được thiết kế đặc biệt cho các ứng dụng web tĩnh (static websites) và Single-Page Applications (SPAs) như React. Amplify Hosting tự động hóa quá trình build và triển khai, đồng thời cung cấp CDN toàn cầu.\n2. Giới thiệu bài Workshop: Ứng dụng Chat Thời gian thực Trong bài lab này, bạn sẽ học cách xây dựng một ứng dụng chat thời gian thực hoàn chỉnh, minh họa sự phối hợp chặt chẽ giữa các dịch vụ AWS đã giới thiệu ở trên. Mục tiêu cuối cùng là có được một ứng dụng chat hoạt động đầy đủ tính năng, có khả năng mở rộng và bảo mật.\nAWS AppSync sẽ là cổng API trung tâm cho ứng dụng chat. Mọi yêu cầu từ frontend (gửi tin nhắn, lấy lịch sử chat, nhận tin nhắn mới) đều đi qua AppSync. Nó sẽ xử lý các GraphQL Query, Mutation và đặc biệt là các Subscription để đẩy tin nhắn mới theo thời gian thực đến tất cả các thành viên trong cuộc trò chuyện. Amazon DynamoDB sẽ là nơi lưu trữ tất cả dữ liệu chat của bạn, bao gồm thông tin người dùng (User), cuộc trò chuyện (Conversation), bản ghi thành viên (UserConversation) và các tin nhắn cụ thể (Message). Amazon Cognito sẽ được sử dụng để xác thực người dùng cho ứng dụng chat, quản lý các tài khoản người dùng và cung cấp quy trình đăng ký/đăng nhập bảo mật. AWS Amplify Hosting sẽ là nơi triển khai ứng dụng React frontend của bạn, tự động build code từ GitHub và triển khai lên một mạng lưới phân phối nội dung (CDN) toàn cầu. 3. Cách thực hiện bài Workshop Workshop này được cấu trúc theo một lộ trình rõ ràng để bạn dễ dàng theo dõi và thực hiện:\n2. Các bước chuẩn bị 3. Thiết lập AWS Amplify Hosting 4. Thiết Lập Backend với AWS AppSync và DynamoDB 5. Thêm Xác thực người dùng và kết nối backend với frontend 6. Dọn dẹp tài nguyên "},{"uri":"https://ThanhHung1104.github.io/LTH_Workshop_01/vi/5-authentication/5.1-cognitouserpool/","title":"Tạo Amazon Cognito User Pool","tags":[],"description":"","content":"5.1. Tạo Amazon Cognito User Pool Chúng ta sẽ tạo một User Pool trong Amazon Cognito để quản lý người dùng (đăng ký, đăng nhập) cho ứng dụng chat của mình.\nTrong ô tìm kiếm của AWS Console, gõ \u0026ldquo;Cognito\u0026rdquo; và chọn dịch vụ Amazon Cognito. Ở thanh điều hướng bên trái, chọn User pools. Nhấn nút Create user pool (Tạo nhóm người dùng). Bước 5.1.1: Cấu hình trải nghiệm đăng nhập (Configure sign-in experience) Define your application (Xác định ứng dụng của bạn): Chọn Single-page application (SPA). Name your application (Tên ứng dụng của bạn): Nhập tên cho ứng dụng, ví dụ: RealTimeChat (hoặc tên tùy chọn). Cognito user pool sign-in options (Tùy chọn đăng nhập nhóm người dùng Cognito): Chọn Username. (Đây là cách đơn giản nhất cho workshop này). Required attributes for sign-up (Thuộc tính bắt buộc khi đăng ký): Chọn Email (để yêu cầu người dùng cung cấp địa chỉ email khi đăng ký). Add a return URL (Thêm URL chuyển hướng): Nhập http://localhost:3000/ (Đây là URL mặc định của ứng dụng React của bạn khi chạy local). Lưu ý: Nếu bạn đã triển khai ứng dụng lên AWS Amplify Hosting, bạn cũng cần thêm URL của ứng dụng đã triển khai vào đây, ví dụ: https://master.d285j22zzz8mbh.amplifyapp.com/. Cuộn xuống cuối trang và nhấn nút Create user directory (Tạo thư mục người dùng). Chúc mừng! Bạn đã thành công tạo Amazon Cognito User Pool. User Pool này sẽ được sử dụng để xác thực người dùng cho ứng dụng của bạn. "},{"uri":"https://ThanhHung1104.github.io/LTH_Workshop_01/vi/4-backend/4.1-dynamodb/","title":"Tạo Bảng DynamoDB","tags":[],"description":"","content":"4.1. Tạo Bảng DynamoDB Chúng ta sẽ sử dụng Amazon DynamoDB, một cơ sở dữ liệu NoSQL hiệu suất cao, để lưu trữ các tin nhắn trong ứng dụng chat của mình.\nTrong ô tìm kiếm của AWS Console, gõ \u0026ldquo;DynamoDB\u0026rdquo; và chọn dịch vụ DynamoDB. Ở thanh điều hướng bên trái, chọn Tables (Bảng).\nNhấn nút Create table (Tạo bảng). Điền thông tin bảng:\nTable name (Tên bảng): Nhập tên cho bảng của bạn, ví dụ: RealTimeChat (hoặc tên bất kỳ bạn thích). Partition key (Khóa phân vùng): Gõ id, chọn kiểu String. Đây sẽ là khóa chính duy nhất cho mỗi bản ghi (item) trong bảng của bạn. Để mặc định các cài đặt khác. Cuộn xuống cuối trang và nhấn nút Create table (Tạo bảng). Chờ cho trạng thái của bảng chuyển sang Active (Hoạt động). Khi bảng ở trạng thái Active, nó đã sẵn sàng để sử dụng. Chúc mừng! Bạn đã thành công tạo cơ sở dữ liệu DynamoDB cho ứng dụng chat của mình.\n"},{"uri":"https://ThanhHung1104.github.io/LTH_Workshop_01/vi/","title":"Xây dựng ứng dụng chat thời gian thực đơn giản trên AWS với AppSync và Amplify","tags":[],"description":"","content":"Workshop: Xây dựng ứng dụng chat thời gian thực đơn giản trên AWS với AppSync và Amplify Tổng quan Trong bài lab thực hành này, bạn sẽ học cách xây dựng một ứng dụng chat thời gian thực đơn giản. Bạn sẽ khám phá cách tích hợp các dịch vụ chính của AWS như AWS AppSync (cho GraphQL và thời gian thực), Amazon DynamoDB (cơ sở dữ liệu), Amazon Cognito (quản lý người dùng), và triển khai frontend React sử dụng AWS Amplify Hosting. Mục tiêu là giúp bạn nắm vững các kiến thức cốt lõi để phát triển ứng dụng fullstack trên nền tảng Serverless của AWS.\nChi phí ước tính Chi phí: Khoảng 0 USD Lý do: Việc sử dụng các dịch vụ trong bài lab này được thiết kế để nằm trong Tầng Miễn phí (Free Tier) của AWS. Do đó, bạn sẽ không phát sinh chi phí đáng kể nào trong suốt quá trình thực hành, nếu bạn tuân thủ các giới hạn của Free Tier và nhớ dọn dẹp tài nguyên sau khi hoàn tất. Thời gian thực hiện dự kiến Thời gian: Khoảng 2 - 3 giờ (Phụ thuộc vào độ quen thuộc với AWS Console, React và Git. Thời gian này bao gồm cả quá trình thiết lập, thực hành và gỡ lỗi tiềm năng). Nội dung Giới thiệu Các bước chuẩn bị Thiết lập AWS Amplify Hosting Thiết Lập Backend với AWS AppSync và DynamoDB Thêm Xác thực người dùng và kết nối backend với frontend Dọn dẹp tài nguyên "},{"uri":"https://ThanhHung1104.github.io/LTH_Workshop_01/vi/5-authentication/5.2-appsync_use_cognitouserpool/","title":"Cấu hình AWS AppSync API để sử dụng Cognito User Pools","tags":[],"description":"","content":"5.2. Cấu hình AWS AppSync API để sử dụng Cognito User Pools Bây giờ, chúng ta sẽ cấu hình API AWS AppSync của bạn để sử dụng Amazon Cognito User Pool vừa tạo làm phương thức xác thực chính.\nTruy cập lại dịch vụ AWS AppSync:\nTrong AWS Console, tìm và chọn dịch vụ AWS AppSync. Chọn API của bạn: RealtimeChatAppAPI_Final. Bắt đầu thay đổi phương thức xác thực mặc định:\nỞ thanh điều hướng bên trái, chọn Settings (Cài đặt). Tại phần Primary authorization mode (Chế độ ủy quyền chính), nhấn nút Edit (Chỉnh sửa). Cấu hình phương thức xác thực chính và Lưu:\nTrên giao diện chỉnh sửa hiện ra: Trong trường Primary authorization mode, chọn Amazon Cognito User Pools. AWS Region (Vùng AWS): Chọn vùng AWS của bạn (ví dụ: US-EAST-1). User pool (Nhóm người dùng): Chọn User Pool bạn đã tạo ở bước trước (ví dụ: RealTimeChat). Nhấn nút Save (Lưu). Xác nhận thay đổi phương thức xác thực (Confirm authorization mode change):\nSau khi nhấn Save ở bước trên, một giao diện xác nhận \u0026ldquo;Edit primary authorization mode\u0026rdquo; sẽ xuất hiện. Tích chọn ô \u0026ldquo;Instead of deleting, make API key an additional authorization mode\u0026rdquo; (Để chuyển API Key thành phương thức xác thực bổ sung). Để xác nhận thay đổi này, gõ chính xác từ confirm vào ô văn bản. Nhấn nút Confirm. Chúc mừng! Bạn đã thiết lập thành công AWS AppSync API để sử dụng Amazon Cognito User Pools để xác thực người dùng. "},{"uri":"https://ThanhHung1104.github.io/LTH_Workshop_01/vi/2-prerequiste/","title":"Chuẩn bị mã nguồn","tags":[],"description":"","content":"\rBạn cần có tài khoản AWS và tài khoản Github (hoặc các nhà cung cấp Git khác) đã sẵn sàng để thực hiện bài thực hành này.\nChuẩn bị Code Frontend Bạn sẽ tải mã nguồn frontend mẫu từ GitHub và chuẩn bị nó cho việc triển khai.\nBước 1: Tải Mã nguồn mẫu (Clone từ GitHub) Mở cửa sổ Command Prompt (CMD) tại folder bạn muốn lưu mã nguồn. Chạy lệnh sau: git clone https://github.com/ThanhHung1104/realtime-chat-frontend.git Lệnh này sẽ tải toàn bộ mã nguồn của dự án chat mẫu về máy tính của bạn, vào một thư mục có tên realtime-chat-frontend. Di chuyển vào thư mục dự án: cd realtime-chat-frontend Bước 2: Đẩy Mã nguồn lên GitHub của bạn Sau khi tải mã nguồn mẫu, bạn cần tạo một kho lưu trữ (repository) trên tài khoản GitHub cá nhân của mình và đẩy mã nguồn đã tải lên đó. AWS Amplify Hosting sẽ kết nối với kho lưu trữ này.\nTạo Project mới trên GitHub: Truy cập và đăng nhập vào tài khoản GitHub của bạn. Trên trang chính của GitHub, nhấn vào nút New (hoặc biểu tượng dấu + ở góc trên bên phải) để tạo một kho lưu trữ mới. Trong phần Repository name, nhập tên cho kho lưu trữ của bạn: realtime-chat-app-frontend (hoặc tên tương tự, ví dụ: my-chat-app). Để nguyên các lựa chọn mặc định khác (chọn Public hoặc Private tùy ý, nhưng đảm bảo KHÔNG tích chọn \u0026ldquo;Initialize this repository with a README\u0026rdquo;, \u0026ldquo;Add .gitignore\u0026rdquo;, \u0026ldquo;Choose a license\u0026rdquo;). Nhấn nút Create repository. Đưa Mã nguồn lên Git: Đảm bảo bạn đang ở trong thư mục gốc của dự án (realtime-chat-app-frontend) trong CMD. Chạy các lệnh sau theo thứ tự: git add . git commit -m \u0026#34;Initial commit: Set up real-time chat frontend\u0026#34; # LƯU Ý QUAN TRỌNG: Thay thế \u0026#39;YOUR_GITHUB_USERNAME\u0026#39; và \u0026#39;YOUR_REPO_NAME\u0026#39; bằng thông tin của bạn git remote set-url origin https://github.com/YOUR_GITHUB_USERNAME/YOUR_REPO_NAME.git git push -u origin main # Hoặc git push -u origin master (tùy thuộc vào tên nhánh chính của bạn) Lưu ý: Bạn cần thay thế https://github.com/YOUR_GITHUB_USERNAME/YOUR_REPO_NAME.git trong lệnh git remote add origin bằng URL kho lưu trữ GitHub mới của CHÍNH BẠN mà bạn vừa tạo ở bước trên. ví dụ git remote set-url origin https://github.com/ThanhHung1104/realtime-chat-app-frontend.git kiểm tra bên github Bạn đã sẵn sàng để bắt đầu hành trình xây dựng ứng dụng chat thời gian thực trên AWS!\n"},{"uri":"https://ThanhHung1104.github.io/LTH_Workshop_01/vi/4-backend/4.2-api_aws_appsync/","title":"Tạo API AWS AppSync","tags":[],"description":"","content":"4.2. Tạo API AWS AppSync Bây giờ, chúng ta sẽ tạo dịch vụ GraphQL API chính của ứng dụng chat thời gian thực. API này sẽ là điểm kết nối giữa frontend và backend của bạn.\nTrong ô tìm kiếm của AWS Console, gõ \u0026ldquo;AppSync\u0026rdquo; và chọn dịch vụ AWS AppSync.\nNhấn nút Create API (Tạo API) và chọn GraphQL API. Bước 4.2.1: Chọn loại API API type (Loại API): Giữ nguyên lựa chọn mặc định là GraphQL APIs. (Đây là loại API GraphQL quản lý một schema duy nhất, phù hợp với nhu cầu của chúng ta). GraphQL API Data Source (Nguồn dữ liệu API GraphQL): Chọn tùy chọn Design from scratch (Thiết kế từ đầu). Cuộn xuống cuối trang và nhấn nút Next. Bước 4.2.2: Chỉ định chi tiết API API name (Tên API): Nhập tên cho API của bạn, ví dụ: RealTimeChatAppAPI_Final. Private API configuration (Cấu hình API riêng tư): Đảm bảo KHÔNG chọn Use private API features (Sử dụng tính năng API riêng tư). Nhấn nút Next. Bước 4.2.3: Chỉ định tài nguyên GraphQL Create a GraphQL type backed by a DynamoDB table (Tạo một loại GraphQL được hỗ trợ bởi bảng DynamoDB): Chọn Create GraphQL resources later (Tạo tài nguyên GraphQL sau). Nhấn nút Next. Bước 4.2.4: Xem lại và tạo API Xem lại thông tin cấu hình của API trong phần Review (Xem lại). Nhấn nút Create API (Tạo API). Chúc mừng! Bạn đã thành công tạo API AWS AppSync của mình. "},{"uri":"https://ThanhHung1104.github.io/LTH_Workshop_01/vi/4-backend/4.3-graphql_schema/","title":"Định Nghĩa GraphQL Schema","tags":[],"description":"","content":"4.3. Định Nghĩa GraphQL Schema Schema GraphQL là trái tim của API AppSync, nó định nghĩa cấu trúc dữ liệu và các thao tác (Query, Mutation, Subscription) mà client có thể thực hiện. Sau khi tạo API, bước tiếp theo là định nghĩa schema cho ứng dụng chat phức tạp của chúng ta.\nSau khi tạo API, bạn sẽ được đưa đến trang tổng quan của AppSync API. Ở thanh điều hướng bên trái, chọn Schema. Trong cửa sổ soạn thảo Schema, xóa bất kỳ nội dung mặc định nào (nếu có) và dán toàn bộ schema phức tạp dưới đây vào:\ntype Message { id: ID! sender: String! content: String! timestamp: AWSDateTime! } type Mutation { # Tạo một tin nhắn mới createMessage(sender: String!, content: String!): Message } type Query { # Lấy danh sách tất cả tin nhắn listMessages: [Message] } type Subscription { # Kích hoạt khi có một tin nhắn mới được tạo bởi mutation \u0026#39;createMessage\u0026#39; onCreateMessage: Message @aws_subscribe(mutations: [\u0026#34;createMessage\u0026#34;]) } schema { query: Query mutation: Mutation subscription: Subscription } Nhấn nút Save Schema (Lưu Schema). Chúc mừng! Bạn đã thành công định nghĩa và lưu Schema GraphQL phức tạp của ứng dụng chat. "},{"uri":"https://ThanhHung1104.github.io/LTH_Workshop_01/vi/5-authentication/5.3-frontend/","title":"Thay đổi Code Frontend và push lại code lên github","tags":[],"description":"","content":"5.3. Thay đổi Code Frontend và Push lại Code lên GitHub Chúng ta cần cập nhật và đẩy lại mã nguồn frontend để kết nối chính xác với backend và phương thức xác thực đã được cấu hình.\nBước 5.3.1: Cập nhật file src/aws-exports.js Mở file src/aws-exports.js trong thư mục mã nguồn của bạn. Thay thế các giá trị bằng thông tin thực tế từ AWS Console của bạn:\naws_appsync_region: Là Region AWS bạn đang thực hiện bài lab (ví dụ: us-east-1).\naws_appsync_graphqlEndpoint:\nTruy cập AWS AppSync Console. Chọn APIs. Chọn API của bạn (ví dụ: RealtimeChatAppAPI). Trong bảng điều khiển bên trái, chọn Settings (Tổng quan). Tìm và sao chép API URL (nó chính là GraphQL endpoint). aws_user_pools_id:\nVào AWS AppSync Console -\u0026gt; Chọn APIs. Chọn API của bạn (ví dụ: RealtimeChatAppAPI). Trong bảng điều khiển bên trái, chọn Settings. Cuộn xuống phần Amazon Cognito User Pool để tìm User Pool ID. aws_user_pools_web_client_id:\nVào Amazon Cognito Console. Chọn User pools (Nhóm người dùng) và chọn User Pool đã tạo (ví dụ: RealTimeChat). Ở menu bên trái, chọn App integration (Tích hợp ứng dụng). Cuộn xuống phần App clients. Chọn App client đã tạo của bạn (ví dụ: RealTimeChat). Tại đây, bạn có thể lấy Client ID. oauth.domain:\nVào Amazon Cognito Console. Chọn User pools (Nhóm người dùng) và chọn User Pool đã tạo (ví dụ: RealTimeChat). Ở menu bên trái, chọn App integration. Cuộn xuống phần Hosted UI (Giao diện người dùng được lưu trữ). Tìm Domain của bạn (ví dụ: yourchatdomain-dev.auth.us-east-1.amazoncognito.com). Sau khi thay thế các thông tin trên, hãy lưu file src/aws-exports.js lại. Bước 5.3.2: Đẩy Code đã thay đổi lên GitHub Mở cửa sổ Command Prompt (CMD) tại thư mục gốc của dự án mã nguồn của bạn. Chạy các lệnh sau theo thứ tự: git add . git commit -m \u0026#34;Update Amplify configuration for authentication\u0026#34; git push origin main # Hoặc git push origin master (tùy thuộc vào tên nhánh chính của bạn) Lưu ý: Sau khi bạn đẩy code lên GitHub, AWS Amplify Hosting sẽ tự động phát hiện thay đổi và kích hoạt quá trình build và triển khai mới cho ứng dụng frontend của bạn.\n"},{"uri":"https://ThanhHung1104.github.io/LTH_Workshop_01/vi/3-amplifyhosting/","title":"Thiết lập AWS Amplify Hosting","tags":[],"description":"","content":"Thiết lập AWS Amplify Hosting Bạn đã chuẩn bị mã nguồn frontend trên GitHub. Bây giờ, chúng ta sẽ kết nối nó với AWS Amplify Hosting để triển khai ứng dụng.\n1. Truy cập AWS Amplify và kết nối Repository Đăng nhập vào AWS Management Console. Tìm và chọn dịch vụ AWS Amplify. Tại trang chính của Amplify Console, nhấn vào nút \u0026ldquo;Deploy an app\u0026rdquo;. Bước 1: Chọn Nhà cung cấp mã nguồn và nhánh Trong phần Connect repository, chọn nhà cung cấp mã nguồn của bạn (ví dụ: GitHub). Nhấn nút Next. Lưu ý: Amplify sẽ yêu cầu bạn cấp quyền truy cập vào tài khoản GitHub của bạn. Vui lòng cấp quyền và ủy quyền theo hướng dẫn của GitHub. Bước 2: Chọn Repository và Branch Sau khi cấp quyền, bạn sẽ thấy danh sách các kho lưu trữ của mình. Chọn kho lưu trữ của bạn (ví dụ: ThanhHung1104/realtime-chat-frontend). Trong phần Branch, chọn nhánh mà bạn muốn triển khai (ví dụ: main hoặc master). Nhấn nút Next. Bước 3: Cấu hình Cài đặt Ứng dụng Trong phần App name, tên ứng dụng sẽ được điền tự động (ví dụ: realtime-chat-app-frontend). Bạn có thể thay đổi nếu muốn. Các cài đặt Build settings sẽ được Amplify tự động phát hiện (ví dụ: Frontend build command: npm run build, Build output directory: build). Vui lòng kiểm tra lại để đảm bảo chính xác. Nhấn nút Next. Bước 4: Xem lại và Triển khai Kiểm tra lại tất cả các cấu hình bạn đã chọn trong phần Review. Nhấn nút Save and deploy. 2. Triển khai Thành công và Truy cập Ứng dụng Sau khi nhấn Save and deploy, bạn sẽ được chuyển đến trang trạng thái triển khai của ứng dụng.\nHệ thống sẽ bắt đầu quá trình Provisioning, Building, và Deploying. Vui lòng chờ cho đến khi tất cả các giai đoạn chuyển sang trạng thái \u0026ldquo;Deployed\u0026rdquo; (màu xanh lá cây). Quá trình này có thể mất vài phút.\nKhi triển khai hoàn tất, bạn sẽ nhận được một URL Domain được cấp tự động bởi AWS Amplify. Truy cập vào Domain được cấp: https://master.d285j22zzz8mbh.amplifyapp.com/ Kết luận:\nBạn đã thành công triển khai frontend của ứng dụng chat thời gian thực và chạy nó bằng công cụ AWS Amplify Hosting. Kể từ bây giờ, bạn có thể cập nhật code trên kho lưu trữ GitHub của mình, và AWS Amplify Hosting sẽ tự động kích hoạt quá trình build và triển khai mới, giữ cho ứng dụng của bạn luôn được cập nhật.\n"},{"uri":"https://ThanhHung1104.github.io/LTH_Workshop_01/vi/4-backend/4.4-data_source/","title":"Cấu Hình Nguồn Dữ liệu (Data Source)","tags":[],"description":"","content":"4.4. Cấu Hình Nguồn Dữ liệu (Data Source) Chúng ta sẽ kết nối API GraphQL với bảng DynamoDB đã tạo, bằng cách cấu hình một Nguồn dữ liệu (Data Source) trong AppSync.\nỞ thanh điều hướng bên trái của AppSync Console, chọn Data Sources (Nguồn dữ liệu). Sau đó, nhấn nút Create data source (Tạo nguồn dữ liệu). Điền thông tin nguồn dữ liệu:\nData source name (Tên nguồn dữ liệu): Nhập RealTimeChatDataSource (hoặc tên bất kỳ bạn thích). Data source type (Loại nguồn dữ liệu): Chọn Amazon DynamoDB table. Region (Vùng): Chọn vùng AWS tương ứng (phải giống với vùng bạn đã tạo bảng DynamoDB), ở đây là us-east-1. Table name (Tên bảng): Chọn bảng RealTimeChat mà bạn đã tạo trước đó. Create or use an existing role (Tạo hoặc sử dụng vai trò hiện có): Chọn New role (Vai trò mới). Nhấn nút Create (Tạo). Chúc mừng! Bạn đã thành công tạo nguồn dữ liệu cho API AppSync. "},{"uri":"https://ThanhHung1104.github.io/LTH_Workshop_01/vi/5-authentication/5.4-test/","title":"Chạy thử","tags":[],"description":"","content":"5.4. Chạy thử Sau khi hoàn tất các bước trên, chúng ta sẽ kiểm tra xem ứng dụng web chat đã hoạt động đúng hay chưa.\nBước 5.4.1: Truy cập ứng dụng Truy cập vào URL Domain mà bạn đã nhận được từ phần \u0026ldquo;3. Thiết lập AWS Amplify Hosting\u0026rdquo;.\nVí dụ: https://master.d285j22zzz8mbh.amplifyapp.com/ Bạn sẽ thấy giao diện đăng nhập/đăng ký của ứng dụng. Bước 5.4.2: Tạo tài khoản và Đăng nhập Nhấn vào tab \u0026ldquo;Create Account\u0026rdquo; (Tạo tài khoản).\nĐiền các thông tin cần thiết như email, username, password, và nhấn nút Create Account (Tạo tài khoản). Sau khi nhấn Create Account, bạn sẽ được chuyển đến trang xác thực tài khoản. Vào hộp thư email của bạn để nhận mã xác thực từ Amazon Cognito. Nhập mã xác thực vừa nhận vào ô và nhấn nút Confirm (Xác nhận). Sau khi xác thực thành công, bạn sẽ được chuyển đến trang chat chính của ứng dụng. Bước 5.4.3: Kiểm tra chức năng chat thời gian thực Thử gửi một tin nhắn bất kỳ. Để kiểm tra tính năng thời gian thực, hãy mở ứng dụng trên một trình duyệt khác (hoặc tab ẩn danh) và tạo thêm một tài khoản mới để đăng nhập. Từ tài khoản mới, hãy gửi một tin nhắn.\nQuan sát tab trình duyệt của tài khoản ban đầu. Bạn sẽ thấy tin nhắn từ tài khoản mới xuất hiện ngay lập tức . Điều này xác nhận tính năng chat thời gian thực đã hoạt động. "},{"uri":"https://ThanhHung1104.github.io/LTH_Workshop_01/vi/4-backend/","title":"Thiết Lập Backend với AWS AppSync và DynamoDB","tags":[],"description":"","content":"Phần này sẽ hướng dẫn bạn tạo API GraphQL, định nghĩa schema, kết nối với cơ sở dữ liệu DynamoDB và cấu hình các resolvers để xử lý yêu cầu.\nNội dung: Tạo Bảng DynamoDB Tạo API AWS AppSync Định Nghĩa GraphQL Schema Cấu Hình Nguồn Dữ liệu (Data Source) Tạo Resolvers (Bộ Phân Giải) Kiểm Tra API với Query Editor (Quan trọng) "},{"uri":"https://ThanhHung1104.github.io/LTH_Workshop_01/vi/4-backend/4.5-resolvers/","title":"Tạo Resolvers (Bộ Phân Giải)","tags":[],"description":"","content":"4.5. Tạo Resolvers (Bộ Phân Giải) Resolvers (Bộ phân giải) là các hàm mã nguồn (trong trường hợp này là JavaScript) giúp ánh xạ các thao tác GraphQL (Query, Mutation, Subscription) đến các nguồn dữ liệu backend (như DynamoDB). Chúng cho phép API AppSync biết cách thực hiện các thao tác trên dữ liệu của bạn.\nỞ thanh điều hướng bên trái của AppSync Console, chọn Schema. Cuộn xuống phần Resolvers (Bộ phân giải). Bạn sẽ thấy danh sách các hoạt động Query, Mutation và Subscription được tự động tạo từ Schema của mình. Bước 4.5.1: Tạo Resolver cho Query.listMessages Resolver này sẽ cho phép bạn lấy danh sách tất cả các tin nhắn từ bảng DynamoDB.\nTìm dòng listMessages dưới mục Query. Nhấn nút Attach (Gắn) bên cạnh nó. Cấu hình Resolver: Data source name (Tên nguồn dữ liệu): Chọn RealTimeChatDataSource. Resolver runtime (Môi trường Runtime Resolver): Đảm bảo chọn AppSync JavaScript (APPSYNC_JS). Cuộn xuống cuối trang và nhấn nút Create (Tạo). Bạn sẽ được chuyển đến trang chỉnh sửa mã Resolver. Dán mã JavaScript sau vào trình soạn thảo code của Resolver, thay thế nội dung hiện có: /** * Sends a request to the attached data source * @param {import(\u0026#39;@aws-appsync/utils\u0026#39;).Context} ctx the context * @returns {*} the request */ export function request(ctx) { return { operation: \u0026#39;Scan\u0026#39; // Thao tác quét toàn bộ bảng DynamoDB }; } /** * Returns the resolver result * @param {import(\u0026#39;@aws-appsync/utils\u0026#39;).Context} ctx the context * @returns {*} the result */ export function response(ctx) { if (ctx.error) { util.error(ctx.error.message, ctx.error.type); } return ctx.result.items; // Trả về danh sách các item từ kết quả Scan } Nhấn nút Save (Lưu) ở góc trên bên phải để lưu Resolver. Bước 4.5.2: Tạo Resolver cho Mutation.createMessage Resolver này sẽ cho phép bạn tạo một tin nhắn mới và lưu nó vào bảng DynamoDB.\nTìm dòng createMessage dưới mục Mutation. Nhấn nút Attach (Gắn) bên cạnh nó. Cấu hình Resolver: Data source name (Tên nguồn dữ liệu): Chọn RealTimeChatDataSource. Resolver runtime (Môi trường Runtime Resolver): Đảm bảo chọn AppSync JavaScript (APPSYNC_JS). Nhấn nút Create (Tạo). Bạn sẽ được chuyển đến trang chỉnh sửa mã Resolver. Dán mã JavaScript sau vào trình soạn thảo code của Resolver, thay thế nội dung hiện có: /** * Sends a request to the attached data source * @param {import(\u0026#39;@aws-appsync/utils\u0026#39;).Context} ctx the context * @returns {*} the request */ export function request(ctx) { const { sender, content } = ctx.args.input; // Lấy các đối số từ mutation (đã sửa thành ctx.args.input) return { operation: \u0026#39;PutItem\u0026#39;, // Thao tác thêm item vào DynamoDB key: util.dynamodb.toMapValues({ id: util.autoId() }), // Tự động tạo ID duy nhất attributeValues: util.dynamodb.toMapValues({ sender, content, timestamp: util.time.nowISO8601() }) // Lưu các thuộc tính }; } /** * Returns the resolver result * @param {import(\u0026#39;@aws-appsync/utils\u0026#39;).Context} ctx the context * @returns {*} the result */ export function response(ctx) { if (ctx.error) { util.error(ctx.error.message, ctx.error.type); } return ctx.result; // Trả về kết quả của thao tác PutItem } Nhấn nút Save (Lưu) ở góc trên bên phải để lưu Resolver. Bước 4.5.3: Cấu hình Subscription onCreateMessage Tìm dòng onCreateMessage dưới mục Subscription. Bạn không cần tạo Resolver cho Subscription này. AppSync sẽ tự động xử lý logic WebSockets khi bạn sử dụng directive @aws_subscribe trong schema và nó được liên kết với một Mutation (trong trường hợp này là createMessage). Bạn đã thành công tạo và cấu hình các Resolvers cơ bản cho ứng dụng chat của mình.\n"},{"uri":"https://ThanhHung1104.github.io/LTH_Workshop_01/vi/5-authentication/","title":"Thêm Xác thực người dùng và kết nối backend với frontend","tags":[],"description":"","content":"Chúng ta sẽ tạo một User Pool trong Amazon Cognito và sau đó cấu hình AppSync API của bạn để sử dụng User Pool đó làm phương thức xác thực mặc định.\nNội dung: Tạo Amazon Cognito User Pool Cấu hình AWS AppSync API để sử dụng Cognito User Pools Thay đổi Code Frontend và push lại code lên github Chạy thử "},{"uri":"https://ThanhHung1104.github.io/LTH_Workshop_01/vi/4-backend/4.6-query_editor/","title":"Kiểm Tra API với Query Editor (Quan trọng)","tags":[],"description":"","content":"4.6. Kiểm Tra API với Query Editor (Quan trọng) Đây là bước cực kỳ quan trọng để bạn xác nhận rằng backend của ứng dụng chat đã hoạt động đúng cách trước khi chuyển sang phần frontend. Bạn sẽ sử dụng Query Editor tích hợp sẵn trong AppSync Console để kiểm thử các hoạt động GraphQL.\nỞ thanh điều hướng bên trái của AppSync Console, chọn Queries (Truy vấn). Bạn sẽ thấy một trình soạn thảo GraphQL tích hợp. Đây là nơi bạn sẽ nhập và chạy các Query, Mutation và Subscription.\nBước 4.6.1: Thử nghiệm Mutation (createMessage) Bạn sẽ gửi một tin nhắn mới để kiểm tra chức năng ghi dữ liệu.\nXóa nội dung hiện có trong trình soạn thảo.\nDán đoạn mã Mutation sau vào trình soạn thảo và nhấn nút \u0026ldquo;Run\u0026rdquo; (biểu tượng Play) để thực thi:\nmutation CreateNewMessage { createMessage(sender: \u0026#34;Alice\u0026#34;, content: \u0026#34;Hello from AppSync!\u0026#34;) { id sender content timestamp } } Bạn sẽ thấy kết quả trả về trong cửa sổ bên phải, bao gồm id của tin nhắn, tên người gửi, nội dung và thời gian gửi. Điều này xác nhận Mutation đã thành công. Bước 4.6.2: Thử nghiệm Subscription (onCreateMessage) Bạn sẽ đăng ký lắng nghe tin nhắn mới theo thời gian thực.\nMở một tab trình duyệt mới và truy cập lại AppSync Console của bạn (hoặc giữ tab hiện tại và mở một tab khác). Điều hướng đến phần Queries cho API của bạn.\nTrong tab mới này, dán đoạn mã Subscription sau vào trình soạn thảo và nhấn nút \u0026ldquo;Run\u0026rdquo;:\nsubscription OnNewMessage { onCreateMessage { id sender content timestamp } } Khi bạn chạy Subscription này, nó sẽ hiển thị \u0026ldquo;Listening\u0026hellip;\u0026rdquo; cho thấy nó đang chờ tin nhắn mới. Quay lại tab trình duyệt ban đầu (hoặc mở một tab thứ ba khác).\nChạy lại Mutation createMessage với nội dung khác (ví dụ: content: \u0026quot;This is a real-time message!\u0026quot;). Quan sát tab có Subscription. Bạn sẽ thấy tin nhắn mới xuất hiện ngay lập tức mà không cần làm mới trang! Điều này xác nhận kết nối WebSocket và chức năng thời gian thực đang hoạt động. Bước 4.6.3: Thử nghiệm Query (listMessages) Bạn sẽ lấy tất cả các tin nhắn đã gửi.\nTrong một tab khác (hoặc sau khi hoàn thành các bước trên), dán đoạn mã Query sau vào trình soạn thảo và nhấn nút \u0026ldquo;Run\u0026rdquo;:\nquery GetAllMessages { listMessages { id sender content timestamp } } Bạn sẽ thấy danh sách tất cả các tin nhắn bạn đã tạo trong cửa sổ kết quả. Chúc mừng! Backend của ứng dụng chat đã hoạt động đúng như mong đợi. Bạn đã sẵn sàng để chuyển sang phần Frontend.\n"},{"uri":"https://ThanhHung1104.github.io/LTH_Workshop_01/vi/6-cleanup/","title":"Dọn dẹp tài nguyên","tags":[],"description":"","content":"6. Dọn dẹp tài nguyên Để tránh phát sinh chi phí không mong muốn sau khi hoàn thành bài thực hành này, chúng ta sẽ tiến hành xóa tất cả các tài nguyên AWS đã được tạo. Vui lòng làm theo các bước theo đúng trình tự được khuyến nghị để đảm bảo các phụ thuộc được xử lý đúng cách.\n6.1. Xóa ứng dụng AWS Amplify Hosting Tài nguyên bị xóa: Ứng dụng frontend của bạn đã triển khai, các bản build, và các tài nguyên liên quan như CloudFront distribution hay S3 bucket mà Amplify đã tạo ra. Đăng nhập vào AWS Management Console. Tìm và chọn dịch vụ Amplify. Chọn ứng dụng của bạn (ví dụ: realtime-chat-app-frontend). Ở thanh điều hướng bên trái, nhấn vào App settings. Nhấn vào General settings. Nhấn nút Delete app (Xóa). Nhập Delete và nhấn Delete App. 6.2. Xóa API AWS AppSync Tài nguyên bị xóa: API GraphQL của bạn, các resolvers, các nguồn dữ liệu (Data Sources) mà AppSync đã tự động tạo cho các bảng DynamoDB, và có thể cả một số log liên quan trong CloudWatch. Trong AWS Management Console, tìm và chọn dịch vụ AWS AppSync. Ở thanh điều hướng bên trái, chọn APIs. Tích chọn API của bạn (ví dụ: RealtimeChatAppAPI). Ở góc trên bên phải, nhấn nút Delete (Xóa). Nhập chính xác tên API (RealtimeChatAppAPI) vào ô xác nhận, sau đó nhấn Delete lần nữa. 6.3. Xóa các Bảng Amazon DynamoDB Tài nguyên bị xóa: Tất cả các bảng DynamoDB chứa dữ liệu chat của bạn. Trong AWS Management Console, tìm và chọn dịch vụ DynamoDB. Ở thanh điều hướng bên trái, chọn Tables (Bảng). Tìm và chọn bảng của bạn đã được tạo bởi AppSync (ví dụ: RealTimeChat). Đối với mỗi bảng, nhấn nút Delete (Xóa). Xác nhận xóa bảng (thường là gõ confirm vào ô xác nhận hoặc tích chọn nếu có), sau đó nhấn Delete. 6.4. Xóa Amazon Cognito User Pool Tài nguyên bị xóa: Tất cả tài khoản người dùng đã đăng ký (username, password, email, v.v.) và các App Client bạn đã tạo trong User Pool đó. Trong AWS Management Console, tìm và chọn dịch vụ Cognito. Ở thanh điều hướng bên trái, chọn User Pools (Nhóm người dùng). Chọn User Pool của bạn (tên bạn đã đặt, ví dụ: RealTimeChat hoặc ChatAppUsersPool). Ở góc trên bên phải, nhấn nút Delete (Xóa nhóm người dùng). Xác nhận và nhấn Delete. 6.5. Xóa các IAM Role không còn sử dụng Tài nguyên bị xóa: Các Role IAM mà AppSync hoặc Cognito đã sử dụng để tương tác với các dịch vụ khác (ví dụ: Role để AppSync truy cập DynamoDB, Role để AppSync ghi log). Đôi khi chúng sẽ tự động xóa khi bạn xóa các dịch vụ chính, nhưng đôi khi không. Trong AWS Management Console, tìm và chọn dịch vụ IAM (Identity and Access Management). Ở thanh điều hướng bên trái, chọn Roles. Trong thanh tìm kiếm, tìm kiếm các Role có tên liên quan đến API của bạn hoặc các dịch vụ đã sử dụng. Ví dụ: Role cho AppSync Service Access: Bắt đầu bằng AppSyncServiceRole- hoặc chứa tên API của bạn (ví dụ: RealtimeChatAppAPI_Final-service-role-... hoặc AppSyncFullDynamoDBAccessRole nếu bạn tự tạo). Role cho AppSync Logging: Bắt đầu bằng AppSyncLoggingRole- hoặc chứa ID API của bạn. Chọn (các) Role không còn cần thiết. Nhấn nút Delete (Xóa). Xác nhận và nhấn Delete. Sau khi hoàn thành tất cả các bước trên, bạn đã xóa sạch sẽ mọi tài nguyên AWS đã tạo trong bài thực hành này và sẽ không phát sinh thêm chi phí.\n"},{"uri":"https://ThanhHung1104.github.io/LTH_Workshop_01/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://ThanhHung1104.github.io/LTH_Workshop_01/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]